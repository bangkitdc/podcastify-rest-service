generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LOCAL_URL")
}

model Role {
  role_id         Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  users           User[]
}

model User {
  user_id         Int       @id @default(autoincrement())
  email           String    @unique @db.VarChar(255)
  username        String    @unique @db.VarChar(50)
  first_name      String    @db.VarChar(255)
  last_name       String    @db.VarChar(255)
  password        String    @db.VarChar(255)
  role_id         Int       @default(2)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  role            Role      @relation(fields: [role_id], references: [role_id])
  podcasts        Podcast[]
}

model Category {
  category_id     Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  podcasts        Podcast[]
}

model Podcast {
  podcast_id      Int       @id @default(autoincrement())
  title           String    @unique @db.VarChar(255)
  description     String    @db.VarChar(255)
  creator_id      Int       
  image_url       String?   @db.VarChar(255)
  category_id     Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  category        Category  @relation(fields: [category_id], references: [category_id])
  user            User      @relation(fields: [creator_id], references: [user_id])
  episodes        Episode[]
}

model Episode {
  episode_id      Int       @id @default(autoincrement())
  podcast_id      Int
  title           String    @unique @db.VarChar(255)
  description     String    @db.VarChar(255)
  duration        Int       
  image_url       String?   @db.VarChar(255)
  audio_url       String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  podcast         Podcast   @relation(fields: [podcast_id], references: [podcast_id])
  episodeLikes    EpisodeLike[]
  episodeComments EpisodeComment[]
}

model EpisodeLike {
  @@id([episode_id, user_id]) // Composite primary key
  
  episode_id      Int
  user_id         Int       // external user
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  episode         Episode   @relation(fields: [episode_id], references: [episode_id])
}

model EpisodeComment {
  comment_id      Int       @id @default(autoincrement())
  episode_id      Int
  user_id         Int       //external user
  comment_text    String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  episode         Episode   @relation(fields: [episode_id], references: [episode_id])
}